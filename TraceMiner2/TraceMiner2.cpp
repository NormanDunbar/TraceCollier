/** @mainpage TraceMiner 2
 *
 *  @author Norman Dunbar
 *  @copyright MIT Licence
 *  @section Introduction
 *
 * TraceMiner 2 is a new improved version of the old TraceMiner utility. It has
 * been completely rewritten in C++ rather than the old style vanilla C. This has made
 * things surprisingly easier to do in the new versions and has got around a whole pile
 * of crud and hacks in the previous version. There's no manual configuration required
 * before compiling for example.
 *
 * @section sec-free-source-code Free Source Code
 *
 * The source code for TraceMiner2 lives in GitHub at
 * https://github.com/NormanDunbar/TraceMiner2/.
 *
 * Feel free to clone the repository and make any desired changes you wish.
 *
 * You may, if you just want to compile and use the code, download the source as a
 * zip file from https://github.com/NormanDunbar/TraceMiner2/archive/master.zip.
 *
 * @section sec-compiling Compiling
 *
 * The source should be downloaded. Then simply compile all the *.cpp files using a C++
 * compiler that knows about the Standard Template Library (aka STL). This is the only
 * "weird" thing used by TraceMiner2. No other special libraries such as Boost, for
 * example, are required.
 *
 * @subsection sub-sec-with-codeblocks With CodeBlocks
 *
 * There's a CodeBlocks project file, `TraceMiner2.cbp`, located in the main source folder.
 * You may need to change some paths etc to use it. In my own setup, I have configured the
 * free Borland/Embarcadero C++ compiler, version 10.1, to be used. Get yours at
 * https://www.embarcadero.com/free-tools/ccompiler/start-for-free. CodeBlocks itself is
 * available at https://www.codeblocks.org.
 *
 * @subsection sub-sec-with-borland With Borland/Embarcadero C++ 10.1
 *
 * Unzip the download zip file, then:
 *
 * @code
 * cd TraceMiner2-master\TraceMiner2
 * bcc32c -o ..\bin\TraceMiner2.exe *.cpp
 * @endcode
 *
 * The generated TraceMiner2.exe can be found in the TraceMiner2-master\bin folder.
 *
 * Get a free copy of the compiler at https://www.embarcadero.com/free-tools/ccompiler/start-for-free.
 *
 * @subsection sub-sec-with-gpp With G++
 *
 * Not yet tested.
 *
 * @subsection sec-makefile With a Makefile
 *
 * Not yet available.
 *
 * @section sec-execution Execution
 *
 * There is one mandatory parameter required, the trace file name. This must have the extension
 * ".trc" as generated by Oracle. The report file will have the ".trc" changed to ".txt" or
 * ".html" depending on whether you have requested a plain text or HTML report format.
 *
 * The report file will be created in the same location as the trace file.
 *
 * If you choose to run in verbose mode, and you probably shouldn't, the output file for that
 * detail will be the same as the trace file name, but with the ".trc" extension replaced by
 * ".dbg". Once again, the output file will be in the same location as the trace file.
 *
 * The optional parameters are as follows:
 *
 * @li --verbose or -v - indicates that you wish to generate lots of output for debugging purposes.
 * @li --help -h or -? - indicates that you want help. The program will exit after displaying the
 * usage details.
 * @li --html or -m - indicates that you wish to have the report formatted in HTML as opposed to
 * plain text.
 *
 *  @section sec-mit-licence MIT Licence
 *
 * MIT License
 *
 * Copyright (c) 2017 Norman Dunbar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


#include "TraceMiner2.h"
#include "utilities.h"


// Version number.
const float version = 0.01;

// Various flags set according to the passed parameters.
tmOptions options;

int main(int argc, char *argv[])
{
    // Parse command line args and bale if problems detected.
    bool allOk = options.ParseArgs(argc, argv);
    if (!allOk) {
        return 1;
    }

    // Show help and exit requested?
    if (options.Help()) {
        return 0;
    }

    // This is it, here is where we hit the big time! :)
    tmTraceFile *traceFile = new tmTraceFile(options.traceFile());

    // Assume everything worked.
    int result = 0;

    // Open the trace file and parse the header.
    if (!traceFile->openTraceFile()) {
        cerr << "TraceMiner2: Failed to open "
             << options.traceFile() << endl;
        result = 1;
    } else {
        // Parse the remainder of the trace file.
        if (!traceFile->parseTraceFile()) {
            cerr << "TraceMiner2: Failed to parse "
                 << options.traceFile() << endl;
            result = 1;
        }
    }

    // Clean up.
    delete traceFile;
    return result;
}
